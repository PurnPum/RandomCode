Heurística : Proceso para guiar en la toma de decisiones, no ha de ser óptimo pero sí práctico.
Sigues una heurística hasta que tengas una razón para desviarte de ella.

Ratio Data-Ink : Heurística gráfica -> El núcleo inborrable de una gráfica de información no redundante,
										crucial para poder entender una variable.
		Definimos el ratio data-ink como la división entre la cantidad de data-ink y la
		cantidad de tinta necesaria para imprimir la gráfica. Esto básicamente es para eliminar elementos innecesarios de una gráfica.
		
Chart-Junk :
	Arte óptico inintencionado: Como iluminación o patrones
	La cuadrícula: Causa competencia con los datos actuales, lo mejor es etiquetar directamente.
	Gráficas creativas de no-dato : Normalmente linealidades o fotos incluídas en el gráfico.
	
Estudios muestran como embellecer gráficas puede faciliar recordar la gráfica tras una cantidad de tiempo elevada,
y al mismo tiempo no cambiar la precisión de la interpretación de las mismas. Sin embargo esta estrategía ha de usarse con
cuidado ya que podría afectar a la parcialidad del lector frente a los datos.

Edward Tufte es el más conocido promovedor de la eliminación de embellecimientos visuales, indicando que es
incorrecto distorsionar las medidas de los datos para cumplir un esquema decorativo.

Por otro lado Nigel Holmes indica que los datos gráficos han de enganchar el interés del lector
y demuestra cómo hacerlo con gráficas ilustradas. Su argumento principal es que la razón
principal apra realizar una gráfica es para clarificar o hacer visible los hechos que podrían escapar
al ojo no entrenado enterrados en una masa de material escrito.

La perspectiva minimalista argumenta que los bajos ratios de data-ink y excesivos adornos disminuyen la
interpretabilidad de los datos. Existen apoyos al argumento de la interpretabilidad cuando esta se define como la precisión y velocidad
de responder a cuestiones basadas en la gráfica. Un estudio de Schonlau y Peters encontró una correlación
entre la perdida de precisión y el hecho de añadir la tercera dimensión a una gráfica, mostrando que lleva más tiempo evaluar
las gráficas 3D o de pastel.

Estudios muestran que en general los usuarios prefieren usar gráficas 3D para mostrárselas a alguien
y 2D para uso personal inmediato. Y que los diseñadores tienen más tendencia a añadir chart junk cuando
su objetivo es causar impresión o persuasión.

Blasio y Bisantz argumentan que en tareas de monitorización la interpretabilidad es clave y suprema.
Reducciones en la misma podrían causar altos incrementos en costes para corporaciones e incrementar el
esfuerzo mental necesario para hacer tareas comunes.

Spark lines : Gráficas muy simples y pequeñas que se pueden añadir a gráficas o tablas ya existentes.
No da muchos detalles pero sí nos muestra tendencias de los datos. Estas spark lines se usan principalmente
en datos donde las tendencias o características distributivas son importantes.

Factor mentira : Es la división del tamaño de un efecto mostrado en la gráfica entre el tamaño del efecto que realmente
está en los datos. Se usa para tratar de influenciar al lector, o incoscientemente para ayudar con la narrativa.

Arquitectura Matplotlib:

	Capa de fondo : Se encarga de representar los gráficos en la pantalla o en un fichero, en jupyter usamos el 
	inline de fondo.
	Capa artística : Contiene contenedores como Figura, Subgráfica y eje. También contiene primitivos como
					Rectánuglo, colecciones y Line2D.
	Capa de Guión : Simplifica el acceso a las capas anteriores, usaremos PyPlot
	
PyPlot es una metodología de visualización de la información procesal, mientras que D3.js, SVG o HTML, son declarativos.

Matplotlib:

	Actualmente soporta gráficos interactivos en la mayoría de sistemas operativos de escritorio 
	usando los toolkits GTK+, Qt, Tk, FLTK, wxWidgets y Cocoa. También se puede insertar en un headless webserver.
	
	Arquitectura matplotlib:
    El objeto de mayor nivel que controla y maneja a todos los elementos en una gráfica dada se llama Figura.
    Una de las tareas centrales de la arquitectura que matplotlib debe resolver es implementar un framework para
    representar y manipular la Figura que esta segregada por renderizar la Figura a un ventana de la interfaz de
    usuario. Esto permite construir atributos y lógica más sofisticados en dichas Figuras, manteniendo los backends.
    Esta arquitectura se puede ver en tres capas separadas una encima de otra como una pila.
    
-   Capa de Fondo (Backend):
    
    Al fondo de la pila esta la capa de Fondo (Backend), proporciona una implementación concreta de las siguientes 
    clases abstractas de la interfaz:
        FigureCanvas : Encapsula el concepto de la superficie donde se dibuja
        Renderer : Realiza las tareas de dibujar
        Event : Maneja entradas de usuario como eventos de teclado o ratón
    Las clases abstractas residen en matplotlib.backed_bases
    
    Para un toolkit de interfaces como Qt, FigureCanvas ya tiene una implementación específica que sabe como 
    insertarse en una ventana nativa de Qt, transferir los comandos del Renderer de matplotlib en la superficie de 
    dibujo de Qt y traducir los eventos nativos de Qt en el framework Event de matplotlib.

    El trabajo del Renderer es proporcionar una interfaz de dibujo de bajo nivel para dibujar en el lienzo, 
    originalmente la API de Renderer estaaba basada en la interfaz Drawable de GDK, pero hoy en día esta API está 
    mucho más simplificada ya que esto daba problemas para implementar nuevos backends. Matplotlib tiene soporte para
    un Renderer basado en píxeles usando el modelo de librería en C++ Anti-Gain Geometry (agg)

    El framework "Event" de matplotlib asocia eventos de interfaz como pulsaciones de teclado o ratón a las clases de 
    eventos de matplotlib "KeyEvent" o "MouseEvent".
    
    El código de ejemplo "Ejemplo1.py" muestra como (des)activar las líneas en la ventana al pulsar 't'.
    
    Esta abstracción permite a los desarrolladores escribir código manejador de eventos de manera que solo haya que 
    escribirlo una vez y ejecutarlo en todos lados.
    
-   Capa Artística (Artist):
    
    La capa intermedia en la pila de matplotlib, aquí se realizan la mayoría de tareas arduas. El "Artist" es el 
    objeto que coge al "Renderer" y dibuja en el "FigureCanvas". Todo lo que ves en una figura de matplotlib es una 
    instancia de Artist; el título, las lineas, la leyenda, y demás corresponden a instancias individuales de Artist.
    La clase base es matplotlib.artist.Artist, que contiene atributos que cada Artisst comparte.
    
    El metodo "draw" es donde el acoplamiento entre la jerarquía de Artist y el backend se da a cabo. Si creáramos 
    una subclase de Artist, tendríamos que implementar el método esencial "draw", al cual se le pasa un renderizador
    del backend. El Artista no sabe en qué tipo de backend va a dibujar el Renderer, pero sabe que la API del 
    Renderer llamará al método apropiado ("draw_text" o "draw_path"). Ya que el Renderer tiene un puntero a su lienzo
    y sabe cómo dibujar en él, el método "draw" transforma la representacion abstracta del Artist a colores en un 
    buffer de píxeles, rutas en un SVG u otra representacion cualquiera.
    
    Hay dos tipos de Artist's en la jerarquía. Los artistas primitivos representan los tipos de objetos que verías en
    una gráfica (Line2D, Rectangle, Circle y Text). Los artistas compuestos son colecciones de otros Artistas como 
    Axis, Tick, Axes y Figure. Un artista compuesto puede contener a otros artistas compuestos o artistas primitivos.
    Por ejemplo Figure contiene uno o más Axes compuestos y el fondo es un Rectangle primitivo.
    
    El Artist compuesto más importante es Axes, donde están definidos la mayoría de los métodos de trazado de la API 
    de matplotlib. También contiene múltiples métodos de ayuda para crear artistas primitivos y añadirlos a la 
    instancia de Axes. Por ejemplo Axes.imshow crea una o más matplotlib.image.AxesImage, que se almacenan en 
    Axes.images.
    
    En el ejemplo "ejemplo2.py" vemos como se define un backend, le conecta una Figura, usa numpy para crear datos y
    traza un histograma ("matplotlib_histogram.png").
    
-   Capa de Guión (Scripting) (pyplot):
    
    Con una API bastante cómoda de usar (si bien potencialmente densa sintácticamente), podríamos simplificar el 
    código anterior al "ejemplo3.py" que resultaría en lo mismo (a diferencia de que ejemplo3 carga el histograma en
    una ventana en vez de guardarlo en un png como hizo ejemplo2)
    
    Veamos varias líneas del ejemplo3:
        
        plt.hist : Primer comando de trazado, pyplot mirará sus estructuras internas a ver si existe una 
            instancia activa de Figure. Si fuera así extraería las Axes y, llamando con la API, dirigiría el trazado 
            directamente al método Axes.hist, en este caso no hay figura así que crea la Figure y las Axes, las pone 
            como activas y dirige el trazado a Axes.hist
        plt.title : Todo igual que antes pero llama a Axes.set_title
        plt.show : Forzará a la Figure a renderizarse, si el usuario indicó un backend de interfaz por defecto en su 
            fichero de configuración, iniciará el bucle principal de la interfaz y pondrá cualquier figura creada en
            la pantalla.
            
    En general la interfaz pyplot es una fina capa que rodea a la API de Artist, pretendiendo evitar códigos 
    duplicados.
    
Matplotlib pasa bastante tiempo transformando coordenadas de un systema a otro. Estos sistemas coordinados incluyen:

    data : Información original.
    axes : El espacio definido por un rectángulo de ejes.
    figure : Es espacio conteniendo a una figura entera.
    display : Las coordenadas físicas usadas en la salida (píxeles en PNG, puntos en PostScript, etc)
    
Cada artista tiene un nodo de transformación que sabe transformar de un systema coordenado a otro. Estos nodos están
conectados juntos en una gráfica dirigida, donde cada nodo depende de su padre. La mayoría de estas transformaciones
son reversibles, lo que hace posible pulsar en un elemento del trazado y devolver sus coordenadas en el espacio data.

Los nodos de transformación pueden ser transformadores afines o no. Los afines son la familia de transformadores que preservan lineas rectas y ratios de distancias, incluyendo rotación, translacion, escala y obliquedad. Las transformaciones afines se representan usando una matríz 3x3.

Las coordenadas bidimensionales se pueden transformar fácilmente multiplicándolas por la matriz. Otra propiedad útil
es que las transformaciones afines se pueden componer entre sí con multiplicación matricial. Esto reduce 
computacionalidad y hace que los desplazamientos y enfoques sean más eficientes en la ventana de la interfaz.
